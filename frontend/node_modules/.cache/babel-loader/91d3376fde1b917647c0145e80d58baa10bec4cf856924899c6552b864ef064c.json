{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\omie1\\\\Desktop\\\\AWS react\\\\frontend\\\\src\\\\pages\\\\Modules.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { apiClient } from \"../utils/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport LoadingSpinner from \"../components/LoadingSpinner\";\nimport \"./Questions.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const [questionSets, setQuestionSets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedSet, setSelectedSet] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [userAnswers, setUserAnswers] = useState({});\n  const [showResults, setShowResults] = useState(false);\n  const [quizMode, setQuizMode] = useState(\"practice\"); // 'practice' or 'exam'\n  const [quizQuestions, setQuizQuestions] = useState([]);\n  const [startTime, setStartTime] = useState(null);\n  const [timeRemaining, setTimeRemaining] = useState(null);\n  const [showExplanation, setShowExplanation] = useState(false);\n  const [quizResults, setQuizResults] = useState(null);\n  const {\n    updateProgress\n  } = useAuth();\n  useEffect(() => {\n    fetchQuestionSets();\n  }, []);\n\n  // Timer effect for exam mode\n  useEffect(() => {\n    let timer;\n    if (selectedSet && quizMode === \"exam\" && timeRemaining > 0 && !showResults) {\n      timer = setInterval(() => {\n        setTimeRemaining(prev => {\n          if (prev <= 1) {\n            // Time's up - auto submit\n            handleTimeUp();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [selectedSet, quizMode, timeRemaining, showResults]);\n  const fetchQuestionSets = async () => {\n    try {\n      const response = await apiClient.questions.getAll();\n      setQuestionSets(response.data);\n    } catch (error) {\n      console.error(\"Error fetching question sets:\", error);\n      // Fallback data\n      setQuestionSets([{\n        id: 1,\n        title: \"Practice Set 1: Cloud Concepts\",\n        questions: 65,\n        difficulty: \"Beginner\",\n        completed: false,\n        timeLimit: 90\n      }, {\n        id: 2,\n        title: \"Practice Set 2: AWS Core Services\",\n        questions: 85,\n        difficulty: \"Intermediate\",\n        completed: false,\n        timeLimit: 120\n      }, {\n        id: 3,\n        title: \"Practice Set 3: Security & Compliance\",\n        questions: 75,\n        difficulty: \"Intermediate\",\n        completed: false,\n        timeLimit: 110\n      }, {\n        id: 11,\n        title: \"Full Practice Exam\",\n        questions: 65,\n        difficulty: \"Exam\",\n        completed: false,\n        timeLimit: 90\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const startQuestionSet = async (questionSet, mode = \"practice\") => {\n    try {\n      setLoading(true);\n      const response = await apiClient.questions.getById(questionSet.id);\n      setQuizQuestions(response.data.questions || []);\n      setSelectedSet(questionSet);\n      setQuizMode(mode);\n      setCurrentQuestion(0);\n      setUserAnswers({});\n      setShowResults(false);\n      setShowExplanation(false);\n      setQuizResults(null);\n      setStartTime(Date.now());\n\n      // Set timer for exam mode\n      if (mode === \"exam\" && questionSet.timeLimit) {\n        setTimeRemaining(questionSet.timeLimit * 60); // Convert minutes to seconds\n      } else {\n        setTimeRemaining(null);\n      }\n    } catch (error) {\n      console.error(\"Error loading question set:\", error);\n      // Use sample questions\n      setQuizQuestions([{\n        question_id: 1,\n        question_text: \"AWS Cloud Adoption Framework (CAF) is organized into how many perspectives?\",\n        options: [{\n          option_id: 1,\n          option_text: \"ten\"\n        }, {\n          option_id: 2,\n          option_text: \"eight\"\n        }, {\n          option_id: 3,\n          option_text: \"four\"\n        }, {\n          option_id: 4,\n          option_text: \"six\"\n        }],\n        correct_answer_id: 4,\n        explanation: \"The AWS CAF is organized into six perspectives: Business, People, Governance, Platform, Security, and Operations.\"\n      }]);\n      setSelectedSet(questionSet);\n      setQuizMode(mode);\n      setCurrentQuestion(0);\n      setUserAnswers({});\n      setShowResults(false);\n      setShowExplanation(false);\n      setQuizResults(null);\n      setStartTime(Date.now());\n      if (mode === \"exam\") {\n        setTimeRemaining(90 * 60); // 90 minutes default\n      } else {\n        setTimeRemaining(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAnswer = (questionId, answerId) => {\n    setUserAnswers(prev => ({\n      ...prev,\n      [questionId]: answerId\n    }));\n\n    // In practice mode, show explanation immediately\n    if (quizMode === \"practice\") {\n      setShowExplanation(true);\n    }\n  };\n  const handleMultipleAnswer = (questionId, answerId) => {\n    setUserAnswers(prev => {\n      const currentAnswers = prev[questionId] || [];\n      const isSelected = currentAnswers.includes(answerId);\n      if (isSelected) {\n        return {\n          ...prev,\n          [questionId]: currentAnswers.filter(id => id !== answerId)\n        };\n      } else {\n        return {\n          ...prev,\n          [questionId]: [...currentAnswers, answerId]\n        };\n      }\n    });\n  };\n  const nextQuestion = async () => {\n    if (currentQuestion < quizQuestions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n      setShowExplanation(false);\n    } else {\n      await submitQuiz();\n    }\n  };\n  const submitQuiz = async () => {\n    const timeSpent = Math.round((Date.now() - startTime) / 1000 / 60); // minutes\n\n    // Calculate results\n    const correctAnswers = quizQuestions.filter(q => {\n      const userAnswer = userAnswers[q.question_id];\n      const correctAnswer = q.correct_answer_id;\n      if (Array.isArray(correctAnswer)) {\n        return Array.isArray(userAnswer) && correctAnswer.length === userAnswer.length && correctAnswer.every(id => userAnswer.includes(id));\n      } else {\n        return userAnswer === correctAnswer;\n      }\n    }).length;\n    const score = Math.round(correctAnswers / quizQuestions.length * 100);\n    const results = {\n      totalQuestions: quizQuestions.length,\n      correctAnswers,\n      score,\n      timeSpent,\n      mode: quizMode\n    };\n    setQuizResults(results);\n    try {\n      const response = await apiClient.questions.submitQuiz(selectedSet.id, {\n        answers: userAnswers,\n        timeSpent,\n        mode: quizMode\n      });\n      console.log(\"Quiz results:\", response.data.results);\n    } catch (error) {\n      console.error(\"Error submitting quiz:\", error);\n    }\n    setShowResults(true);\n  };\n  const handleTimeUp = () => {\n    submitQuiz();\n  };\n  const backToQuestions = () => {\n    setSelectedSet(null);\n    setShowResults(false);\n    setTimeRemaining(null);\n  };\n  const formatTime = seconds => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const secs = seconds % 60;\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`;\n    }\n    return `${minutes}:${secs.toString().padStart(2, \"0\")}`;\n  };\n  const getDifficultyColor = difficulty => {\n    switch (difficulty) {\n      case \"Beginner\":\n        return \"var(--primary-green)\";\n      case \"Intermediate\":\n        return \"var(--primary-blue)\";\n      case \"Advanced\":\n        return \"var(--primary-orange)\";\n      case \"Exam\":\n        return \"#DC3545\";\n      default:\n        return \"var(--text-gray)\";\n    }\n  };\n  const getScoreColor = score => {\n    if (score >= 80) return \"#28a745\"; // Green\n    if (score >= 70) return \"#ffc107\"; // Yellow\n    return \"#dc3545\"; // Red\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      message: \"Loading question sets...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 12\n    }, this);\n  }\n  if (selectedSet) {\n    const currentQ = quizQuestions[currentQuestion];\n    const isMultipleChoice = Array.isArray(currentQ === null || currentQ === void 0 ? void 0 : currentQ.correct_answer_id);\n    const userAnswer = userAnswers[currentQ === null || currentQ === void 0 ? void 0 : currentQ.question_id];\n    const isAnswered = userAnswer !== undefined && userAnswer !== null && (Array.isArray(userAnswer) ? userAnswer.length > 0 : true);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-quiz\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: backToQuestions,\n            className: \"back-btn\",\n            children: \"\\u2190 Back to Question Sets\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: selectedSet.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quiz-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"quiz-mode\",\n              children: quizMode === \"exam\" ? \"Exam Mode\" : \"Practice Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"difficulty\",\n              style: {\n                color: getDifficultyColor(selectedSet.difficulty)\n              },\n              children: selectedSet.difficulty\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this), timeRemaining !== null && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `timer ${timeRemaining < 300 ? \"timer-warning\" : \"\"}`,\n              children: [\"Time: \", formatTime(timeRemaining)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-fill\",\n              style: {\n                width: `${(currentQuestion + 1) / quizQuestions.length * 100}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Question \", currentQuestion + 1, \" of \", quizQuestions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), !showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: currentQ === null || currentQ === void 0 ? void 0 : currentQ.question_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), isMultipleChoice && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"multiple-choice-hint\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Select all that apply (Multiple answers required)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-options\",\n            children: currentQ === null || currentQ === void 0 ? void 0 : currentQ.options.map(option => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"option\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: isMultipleChoice ? \"checkbox\" : \"radio\",\n                id: `option${option.option_id}`,\n                name: \"answer\",\n                checked: isMultipleChoice ? (userAnswers[currentQ.question_id] || []).includes(option.option_id) : userAnswers[currentQ.question_id] === option.option_id,\n                onChange: () => isMultipleChoice ? handleMultipleAnswer(currentQ.question_id, option.option_id) : handleAnswer(currentQ.question_id, option.option_id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: `option${option.option_id}`,\n                children: `${String.fromCharCode(65 + option.option_id - 1)}) ${option.option_text}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 21\n              }, this)]\n            }, option.option_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 15\n          }, this), quizMode === \"practice\" && showExplanation && isAnswered && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"explanation\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Explanation:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: (currentQ === null || currentQ === void 0 ? void 0 : currentQ.explanation) || \"Explanation will be provided after completion.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: nextQuestion,\n            className: \"btn btn-primary next-btn\",\n            disabled: !isAnswered,\n            children: currentQuestion < quizQuestions.length - 1 ? \"Next Question\" : \"Finish Quiz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Quiz Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You have completed \", selectedSet.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-stats\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-number\",\n                style: {\n                  color: getScoreColor((quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) || 0)\n                },\n                children: [(quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) || 0, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Score\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-number\",\n                children: (quizResults === null || quizResults === void 0 ? void 0 : quizResults.totalQuestions) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Questions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-number\",\n                children: (quizResults === null || quizResults === void 0 ? void 0 : quizResults.correctAnswers) || 0\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Correct\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stat\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-number\",\n                children: [(quizResults === null || quizResults === void 0 ? void 0 : quizResults.timeSpent) || 0, \"m\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"stat-label\",\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"performance-message\",\n            children: [(quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) >= 80 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"success\",\n              children: \"Excellent work! You're ready for the exam.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 46\n            }, this), (quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) >= 70 && (quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) < 80 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"warning\",\n              children: \"Good job! A bit more study and you'll be ready.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 19\n            }, this), (quizResults === null || quizResults === void 0 ? void 0 : quizResults.score) < 70 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"danger\",\n              children: \"Keep studying! Focus on your weak areas.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: backToQuestions,\n              className: \"btn btn-outline\",\n              children: \"Back to Question Sets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startQuestionSet(selectedSet, quizMode),\n              className: \"btn btn-primary\",\n              children: \"Retake Quiz\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questions\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Question Sets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"11 comprehensive question sets with 1100+ practice questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-grid\",\n        children: questionSets.map(questionSet => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-set-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: questionSet.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-badges\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"difficulty-badge\",\n                style: {\n                  backgroundColor: getDifficultyColor(questionSet.difficulty)\n                },\n                children: questionSet.difficulty\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"question-count\",\n                children: [questionSet.questions, \" questions\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 19\n              }, this), questionSet.timeLimit && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"time-limit\",\n                children: [questionSet.timeLimit, \"min\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-progress\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-bar\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-fill\",\n                style: {\n                  width: questionSet.completed ? \"100%\" : \"0%\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"progress-text\",\n              children: questionSet.completed ? \"Completed\" : \"Not Started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startQuestionSet(questionSet, \"practice\"),\n              className: \"btn btn-outline practice-btn\",\n              children: \"Practice Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startQuestionSet(questionSet, \"exam\"),\n              className: \"btn btn-primary exam-btn\",\n              children: \"Exam Mode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this)]\n        }, questionSet.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"HbseriP0I7rProckc+Dg9annms0=\", false, function () {\n  return [useAuth];\n});\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","apiClient","useAuth","LoadingSpinner","jsxDEV","_jsxDEV","Questions","questionSets","setQuestionSets","loading","setLoading","selectedSet","setSelectedSet","currentQuestion","setCurrentQuestion","userAnswers","setUserAnswers","showResults","setShowResults","quizMode","setQuizMode","quizQuestions","setQuizQuestions","startTime","setStartTime","timeRemaining","setTimeRemaining","showExplanation","setShowExplanation","quizResults","setQuizResults","updateProgress","fetchQuestionSets","timer","setInterval","prev","handleTimeUp","clearInterval","response","questions","getAll","data","error","console","id","title","difficulty","completed","timeLimit","startQuestionSet","questionSet","mode","getById","Date","now","question_id","question_text","options","option_id","option_text","correct_answer_id","explanation","handleAnswer","questionId","answerId","handleMultipleAnswer","currentAnswers","isSelected","includes","filter","nextQuestion","length","submitQuiz","timeSpent","Math","round","correctAnswers","q","userAnswer","correctAnswer","Array","isArray","every","score","results","totalQuestions","answers","log","backToQuestions","formatTime","seconds","hours","floor","minutes","secs","toString","padStart","getDifficultyColor","getScoreColor","message","fileName","lineNumber","columnNumber","currentQ","isMultipleChoice","isAnswered","undefined","className","children","onClick","style","color","width","map","option","type","name","checked","onChange","htmlFor","String","fromCharCode","disabled","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/omie1/Desktop/AWS react/frontend/src/pages/Modules.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { apiClient } from \"../utils/api\"\nimport { useAuth } from \"../contexts/AuthContext\"\nimport LoadingSpinner from \"../components/LoadingSpinner\"\nimport \"./Questions.css\"\n\nconst Questions = () => {\n  const [questionSets, setQuestionSets] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [selectedSet, setSelectedSet] = useState(null)\n  const [currentQuestion, setCurrentQuestion] = useState(0)\n  const [userAnswers, setUserAnswers] = useState({})\n  const [showResults, setShowResults] = useState(false)\n  const [quizMode, setQuizMode] = useState(\"practice\") // 'practice' or 'exam'\n  const [quizQuestions, setQuizQuestions] = useState([])\n  const [startTime, setStartTime] = useState(null)\n  const [timeRemaining, setTimeRemaining] = useState(null)\n  const [showExplanation, setShowExplanation] = useState(false)\n  const [quizResults, setQuizResults] = useState(null)\n  const { updateProgress } = useAuth()\n\n  useEffect(() => {\n    fetchQuestionSets()\n  }, [])\n\n  // Timer effect for exam mode\n  useEffect(() => {\n    let timer\n    if (selectedSet && quizMode === \"exam\" && timeRemaining > 0 && !showResults) {\n      timer = setInterval(() => {\n        setTimeRemaining((prev) => {\n          if (prev <= 1) {\n            // Time's up - auto submit\n            handleTimeUp()\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n    }\n    return () => clearInterval(timer)\n  }, [selectedSet, quizMode, timeRemaining, showResults])\n\n  const fetchQuestionSets = async () => {\n    try {\n      const response = await apiClient.questions.getAll()\n      setQuestionSets(response.data)\n    } catch (error) {\n      console.error(\"Error fetching question sets:\", error)\n      // Fallback data\n      setQuestionSets([\n        {\n          id: 1,\n          title: \"Practice Set 1: Cloud Concepts\",\n          questions: 65,\n          difficulty: \"Beginner\",\n          completed: false,\n          timeLimit: 90,\n        },\n        {\n          id: 2,\n          title: \"Practice Set 2: AWS Core Services\",\n          questions: 85,\n          difficulty: \"Intermediate\",\n          completed: false,\n          timeLimit: 120,\n        },\n        {\n          id: 3,\n          title: \"Practice Set 3: Security & Compliance\",\n          questions: 75,\n          difficulty: \"Intermediate\",\n          completed: false,\n          timeLimit: 110,\n        },\n        { id: 11, title: \"Full Practice Exam\", questions: 65, difficulty: \"Exam\", completed: false, timeLimit: 90 },\n      ])\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const startQuestionSet = async (questionSet, mode = \"practice\") => {\n    try {\n      setLoading(true)\n      const response = await apiClient.questions.getById(questionSet.id)\n      setQuizQuestions(response.data.questions || [])\n      setSelectedSet(questionSet)\n      setQuizMode(mode)\n      setCurrentQuestion(0)\n      setUserAnswers({})\n      setShowResults(false)\n      setShowExplanation(false)\n      setQuizResults(null)\n      setStartTime(Date.now())\n\n      // Set timer for exam mode\n      if (mode === \"exam\" && questionSet.timeLimit) {\n        setTimeRemaining(questionSet.timeLimit * 60) // Convert minutes to seconds\n      } else {\n        setTimeRemaining(null)\n      }\n    } catch (error) {\n      console.error(\"Error loading question set:\", error)\n      // Use sample questions\n      setQuizQuestions([\n        {\n          question_id: 1,\n          question_text: \"AWS Cloud Adoption Framework (CAF) is organized into how many perspectives?\",\n          options: [\n            { option_id: 1, option_text: \"ten\" },\n            { option_id: 2, option_text: \"eight\" },\n            { option_id: 3, option_text: \"four\" },\n            { option_id: 4, option_text: \"six\" },\n          ],\n          correct_answer_id: 4,\n          explanation:\n            \"The AWS CAF is organized into six perspectives: Business, People, Governance, Platform, Security, and Operations.\",\n        },\n      ])\n      setSelectedSet(questionSet)\n      setQuizMode(mode)\n      setCurrentQuestion(0)\n      setUserAnswers({})\n      setShowResults(false)\n      setShowExplanation(false)\n      setQuizResults(null)\n      setStartTime(Date.now())\n\n      if (mode === \"exam\") {\n        setTimeRemaining(90 * 60) // 90 minutes default\n      } else {\n        setTimeRemaining(null)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleAnswer = (questionId, answerId) => {\n    setUserAnswers((prev) => ({\n      ...prev,\n      [questionId]: answerId,\n    }))\n\n    // In practice mode, show explanation immediately\n    if (quizMode === \"practice\") {\n      setShowExplanation(true)\n    }\n  }\n\n  const handleMultipleAnswer = (questionId, answerId) => {\n    setUserAnswers((prev) => {\n      const currentAnswers = prev[questionId] || []\n      const isSelected = currentAnswers.includes(answerId)\n\n      if (isSelected) {\n        return {\n          ...prev,\n          [questionId]: currentAnswers.filter((id) => id !== answerId),\n        }\n      } else {\n        return {\n          ...prev,\n          [questionId]: [...currentAnswers, answerId],\n        }\n      }\n    })\n  }\n\n  const nextQuestion = async () => {\n    if (currentQuestion < quizQuestions.length - 1) {\n      setCurrentQuestion((prev) => prev + 1)\n      setShowExplanation(false)\n    } else {\n      await submitQuiz()\n    }\n  }\n\n  const submitQuiz = async () => {\n    const timeSpent = Math.round((Date.now() - startTime) / 1000 / 60) // minutes\n\n    // Calculate results\n    const correctAnswers = quizQuestions.filter((q) => {\n      const userAnswer = userAnswers[q.question_id]\n      const correctAnswer = q.correct_answer_id\n\n      if (Array.isArray(correctAnswer)) {\n        return (\n          Array.isArray(userAnswer) &&\n          correctAnswer.length === userAnswer.length &&\n          correctAnswer.every((id) => userAnswer.includes(id))\n        )\n      } else {\n        return userAnswer === correctAnswer\n      }\n    }).length\n\n    const score = Math.round((correctAnswers / quizQuestions.length) * 100)\n\n    const results = {\n      totalQuestions: quizQuestions.length,\n      correctAnswers,\n      score,\n      timeSpent,\n      mode: quizMode,\n    }\n\n    setQuizResults(results)\n\n    try {\n      const response = await apiClient.questions.submitQuiz(selectedSet.id, {\n        answers: userAnswers,\n        timeSpent,\n        mode: quizMode,\n      })\n\n      console.log(\"Quiz results:\", response.data.results)\n    } catch (error) {\n      console.error(\"Error submitting quiz:\", error)\n    }\n\n    setShowResults(true)\n  }\n\n  const handleTimeUp = () => {\n    submitQuiz()\n  }\n\n  const backToQuestions = () => {\n    setSelectedSet(null)\n    setShowResults(false)\n    setTimeRemaining(null)\n  }\n\n  const formatTime = (seconds) => {\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n    const secs = seconds % 60\n\n    if (hours > 0) {\n      return `${hours}:${minutes.toString().padStart(2, \"0\")}:${secs.toString().padStart(2, \"0\")}`\n    }\n    return `${minutes}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  const getDifficultyColor = (difficulty) => {\n    switch (difficulty) {\n      case \"Beginner\":\n        return \"var(--primary-green)\"\n      case \"Intermediate\":\n        return \"var(--primary-blue)\"\n      case \"Advanced\":\n        return \"var(--primary-orange)\"\n      case \"Exam\":\n        return \"#DC3545\"\n      default:\n        return \"var(--text-gray)\"\n    }\n  }\n\n  const getScoreColor = (score) => {\n    if (score >= 80) return \"#28a745\" // Green\n    if (score >= 70) return \"#ffc107\" // Yellow\n    return \"#dc3545\" // Red\n  }\n\n  if (loading) {\n    return <LoadingSpinner message=\"Loading question sets...\" />\n  }\n\n  if (selectedSet) {\n    const currentQ = quizQuestions[currentQuestion]\n    const isMultipleChoice = Array.isArray(currentQ?.correct_answer_id)\n    const userAnswer = userAnswers[currentQ?.question_id]\n    const isAnswered =\n      userAnswer !== undefined && userAnswer !== null && (Array.isArray(userAnswer) ? userAnswer.length > 0 : true)\n\n    return (\n      <div className=\"question-quiz\">\n        <div className=\"container\">\n          <div className=\"quiz-header\">\n            <button onClick={backToQuestions} className=\"back-btn\">\n              ← Back to Question Sets\n            </button>\n            <h1>{selectedSet.title}</h1>\n            <div className=\"quiz-info\">\n              <span className=\"quiz-mode\">{quizMode === \"exam\" ? \"Exam Mode\" : \"Practice Mode\"}</span>\n              <span className=\"difficulty\" style={{ color: getDifficultyColor(selectedSet.difficulty) }}>\n                {selectedSet.difficulty}\n              </span>\n              {timeRemaining !== null && (\n                <span className={`timer ${timeRemaining < 300 ? \"timer-warning\" : \"\"}`}>\n                  Time: {formatTime(timeRemaining)}\n                </span>\n              )}\n            </div>\n            <div className=\"progress-bar\">\n              <div\n                className=\"progress-fill\"\n                style={{ width: `${((currentQuestion + 1) / quizQuestions.length) * 100}%` }}\n              ></div>\n            </div>\n            <p>\n              Question {currentQuestion + 1} of {quizQuestions.length}\n            </p>\n          </div>\n\n          {!showResults ? (\n            <div className=\"question-card\">\n              <h3>{currentQ?.question_text}</h3>\n              {isMultipleChoice && (\n                <p className=\"multiple-choice-hint\">\n                  <strong>Select all that apply (Multiple answers required)</strong>\n                </p>\n              )}\n\n              <div className=\"question-options\">\n                {currentQ?.options.map((option) => (\n                  <div key={option.option_id} className=\"option\">\n                    <input\n                      type={isMultipleChoice ? \"checkbox\" : \"radio\"}\n                      id={`option${option.option_id}`}\n                      name=\"answer\"\n                      checked={\n                        isMultipleChoice\n                          ? (userAnswers[currentQ.question_id] || []).includes(option.option_id)\n                          : userAnswers[currentQ.question_id] === option.option_id\n                      }\n                      onChange={() =>\n                        isMultipleChoice\n                          ? handleMultipleAnswer(currentQ.question_id, option.option_id)\n                          : handleAnswer(currentQ.question_id, option.option_id)\n                      }\n                    />\n                    <label htmlFor={`option${option.option_id}`}>\n                      {`${String.fromCharCode(65 + option.option_id - 1)}) ${option.option_text}`}\n                    </label>\n                  </div>\n                ))}\n              </div>\n\n              {quizMode === \"practice\" && showExplanation && isAnswered && (\n                <div className=\"explanation\">\n                  <h4>Explanation:</h4>\n                  <p>{currentQ?.explanation || \"Explanation will be provided after completion.\"}</p>\n                </div>\n              )}\n\n              <button onClick={nextQuestion} className=\"btn btn-primary next-btn\" disabled={!isAnswered}>\n                {currentQuestion < quizQuestions.length - 1 ? \"Next Question\" : \"Finish Quiz\"}\n              </button>\n            </div>\n          ) : (\n            <div className=\"results-card\">\n              <h2>Quiz Complete!</h2>\n              <p>You have completed {selectedSet.title}</p>\n              <div className=\"results-stats\">\n                <div className=\"stat\">\n                  <span className=\"stat-number\" style={{ color: getScoreColor(quizResults?.score || 0) }}>\n                    {quizResults?.score || 0}%\n                  </span>\n                  <span className=\"stat-label\">Score</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-number\">{quizResults?.totalQuestions || 0}</span>\n                  <span className=\"stat-label\">Questions</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-number\">{quizResults?.correctAnswers || 0}</span>\n                  <span className=\"stat-label\">Correct</span>\n                </div>\n                <div className=\"stat\">\n                  <span className=\"stat-number\">{quizResults?.timeSpent || 0}m</span>\n                  <span className=\"stat-label\">Time</span>\n                </div>\n              </div>\n\n              <div className=\"performance-message\">\n                {quizResults?.score >= 80 && <p className=\"success\">Excellent work! You're ready for the exam.</p>}\n                {quizResults?.score >= 70 && quizResults?.score < 80 && (\n                  <p className=\"warning\">Good job! A bit more study and you'll be ready.</p>\n                )}\n                {quizResults?.score < 70 && <p className=\"danger\">Keep studying! Focus on your weak areas.</p>}\n              </div>\n\n              <div className=\"results-actions\">\n                <button onClick={backToQuestions} className=\"btn btn-outline\">\n                  Back to Question Sets\n                </button>\n                <button onClick={() => startQuestionSet(selectedSet, quizMode)} className=\"btn btn-primary\">\n                  Retake Quiz\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"questions\">\n      <div className=\"container\">\n        <div className=\"questions-header\">\n          <h1>Question Sets</h1>\n          <p>11 comprehensive question sets with 1100+ practice questions</p>\n        </div>\n\n        <div className=\"questions-grid\">\n          {questionSets.map((questionSet) => (\n            <div key={questionSet.id} className=\"question-set-card\">\n              <div className=\"card-header\">\n                <h3>{questionSet.title}</h3>\n                <div className=\"card-badges\">\n                  <span\n                    className=\"difficulty-badge\"\n                    style={{ backgroundColor: getDifficultyColor(questionSet.difficulty) }}\n                  >\n                    {questionSet.difficulty}\n                  </span>\n                  <span className=\"question-count\">{questionSet.questions} questions</span>\n                  {questionSet.timeLimit && <span className=\"time-limit\">{questionSet.timeLimit}min</span>}\n                </div>\n              </div>\n\n              <div className=\"card-progress\">\n                <div className=\"progress-bar\">\n                  <div className=\"progress-fill\" style={{ width: questionSet.completed ? \"100%\" : \"0%\" }}></div>\n                </div>\n                <span className=\"progress-text\">{questionSet.completed ? \"Completed\" : \"Not Started\"}</span>\n              </div>\n\n              <div className=\"card-actions\">\n                <button\n                  onClick={() => startQuestionSet(questionSet, \"practice\")}\n                  className=\"btn btn-outline practice-btn\"\n                >\n                  Practice Mode\n                </button>\n                <button onClick={() => startQuestionSet(questionSet, \"exam\")} className=\"btn btn-primary exam-btn\">\n                  Exam Mode\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Questions\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}